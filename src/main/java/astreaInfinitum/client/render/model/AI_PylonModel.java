// Date: 8/15/2015 9:42:09 AM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX


package astreaInfinitum.client.render.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class AI_PylonModel extends ModelBase
{
  //fields
    ModelRenderer BaseP1;
    ModelRenderer BaseP2;
    ModelRenderer Core;
    ModelRenderer TopP1;
    ModelRenderer TopP2;
    ModelRenderer SupportFL;
    ModelRenderer SupportFR;
    ModelRenderer SupportBL;
    ModelRenderer SupportBR;
    ModelRenderer ArchRBase;
    ModelRenderer ArchRTop;
    ModelRenderer ArchLBase;
    ModelRenderer ArchLTop;
    ModelRenderer ArchFBase;
    ModelRenderer ArchBBase;
    ModelRenderer ArchBTop;
    ModelRenderer ArchFTop;
  
  public AI_PylonModel()
  {
    textureWidth = 64;
    textureHeight = 64;
    
      BaseP1 = new ModelRenderer(this, 0, 0);
      BaseP1.addBox(-6F, 0F, -6F, 12, 2, 12);
      BaseP1.setRotationPoint(0F, 22F, 0F);
      BaseP1.setTextureSize(64, 32);
      BaseP1.mirror = true;
      setRotation(BaseP1, 0F, 0F, 0F);
      BaseP2 = new ModelRenderer(this, 0, 14);
      BaseP2.addBox(-5F, 0F, -5F, 10, 2, 10);
      BaseP2.setRotationPoint(0F, 20F, 0F);
      BaseP2.setTextureSize(64, 32);
      BaseP2.mirror = true;
      setRotation(BaseP2, 0F, 0F, 0F);
      Core = new ModelRenderer(this, 0, 26);
      Core.addBox(-3F, 0F, -3F, 6, 10, 6);
      Core.setRotationPoint(0F, 10F, 0F);
      Core.setTextureSize(64, 32);
      Core.mirror = true;
      setRotation(Core, 0F, 0.7853982F, 0F);
      TopP1 = new ModelRenderer(this, 0, 14);
      TopP1.addBox(-5F, 0F, -5F, 10, 2, 10);
      TopP1.setRotationPoint(0F, 8F, 0F);
      TopP1.setTextureSize(64, 32);
      TopP1.mirror = true;
      setRotation(TopP1, 0F, 0F, 0F);
      TopP2 = new ModelRenderer(this, 0, 0);
      TopP2.addBox(-6F, 0F, -6F, 12, 2, 12);
      TopP2.setRotationPoint(0F, 6F, 0F);
      TopP2.setTextureSize(64, 32);
      TopP2.mirror = true;
      setRotation(TopP2, 0F, 0F, 0F);
      SupportFL = new ModelRenderer(this, 48, 0);
      SupportFL.addBox(0F, 0F, 0F, 1, 10, 1);
      SupportFL.setRotationPoint(-3F, 10F, -5F);
      SupportFL.setTextureSize(64, 32);
      SupportFL.mirror = true;
      setRotation(SupportFL, 0F, 0F, 0F);
      SupportFR = new ModelRenderer(this, 48, 0);
      SupportFR.addBox(0F, 0F, 0F, 1, 10, 1);
      SupportFR.setRotationPoint(2F, 10F, -5F);
      SupportFR.setTextureSize(64, 32);
      SupportFR.mirror = true;
      setRotation(SupportFR, 0F, 0F, 0F);
      SupportBL = new ModelRenderer(this, 48, 0);
      SupportBL.addBox(0F, 0F, 0F, 1, 10, 1);
      SupportBL.setRotationPoint(2F, 10F, 4F);
      SupportBL.setTextureSize(64, 32);
      SupportBL.mirror = true;
      setRotation(SupportBL, 0F, 0F, 0F);
      SupportBR = new ModelRenderer(this, 48, 0);
      SupportBR.addBox(0F, 0F, 0F, 1, 10, 1);
      SupportBR.setRotationPoint(-3F, 10F, 4F);
      SupportBR.setTextureSize(64, 32);
      SupportBR.mirror = true;
      setRotation(SupportBR, 0F, 0F, 0F);
      ArchRBase = new ModelRenderer(this, 24, 26);
      ArchRBase.addBox(-1F, 0F, -1.5F, 2, 5, 3);
      ArchRBase.setRotationPoint(-4F, 1.4F, 0F);
      ArchRBase.setTextureSize(64, 32);
      ArchRBase.mirror = true;
      setRotation(ArchRBase, 0F, 0F, 0.1745329F);
      ArchRTop = new ModelRenderer(this, 34, 26);
      ArchRTop.addBox(-0.5F, 0F, -1F, 1, 4, 2);
      ArchRTop.setRotationPoint(-3.25F, -2F, 0F);
      ArchRTop.setTextureSize(64, 32);
      ArchRTop.mirror = true;
      setRotation(ArchRTop, 0F, 0F, 0.3141593F);
      ArchLBase = new ModelRenderer(this, 24, 26);
      ArchLBase.addBox(-1F, 0F, 1.5F, 2, 5, 3);
      ArchLBase.setRotationPoint(4F, 1.4F, -3F);
      ArchLBase.setTextureSize(64, 32);
      ArchLBase.mirror = true;
      setRotation(ArchLBase, 0F, 0F, -0.1745329F);
      ArchLTop = new ModelRenderer(this, 34, 26);
      ArchLTop.addBox(-0.5F, 0F, -1F, 1, 4, 2);
      ArchLTop.setRotationPoint(3.3F, -2F, 0F);
      ArchLTop.setTextureSize(64, 32);
      ArchLTop.mirror = true;
      setRotation(ArchLTop, 0F, 0F, -0.3141593F);
      ArchFBase = new ModelRenderer(this, 24, 26);
      ArchFBase.addBox(-1F, 0F, 1.5F, 2, 5, 3);
      ArchFBase.setRotationPoint(-3F, 1.4F, -4F);
      ArchFBase.setTextureSize(64, 32);
      ArchFBase.mirror = true;
      setRotation(ArchFBase, 0F, 1.570796F, -0.1745329F);
      ArchBBase = new ModelRenderer(this, 24, 26);
      ArchBBase.addBox(-1F, 0F, 1.5F, 2, 5, 3);
      ArchBBase.setRotationPoint(-3F, 1.4F, 4F);
      ArchBBase.setTextureSize(64, 32);
      ArchBBase.mirror = true;
      setRotation(ArchBBase, 0F, 1.570796F, 0.1745329F);
      ArchBTop = new ModelRenderer(this, 34, 26);
      ArchBTop.addBox(-0.5F, 0F, -1F, 1, 4, 2);
      ArchBTop.setRotationPoint(0F, -2F, 3.3F);
      ArchBTop.setTextureSize(64, 32);
      ArchBTop.mirror = true;
      setRotation(ArchBTop, 0F, 1.570796F, 0.3141593F);
      ArchFTop = new ModelRenderer(this, 34, 26);
      ArchFTop.addBox(-0.5F, 0F, -1F, 1, 4, 2);
      ArchFTop.setRotationPoint(0F, -2F, -3.3F);
      ArchFTop.setTextureSize(64, 32);
      ArchFTop.mirror = true;
      setRotation(ArchFTop, 0F, 4.712389F, 0.3141593F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    BaseP1.render(f5);
    BaseP2.render(f5);
    Core.render(f5);
    TopP1.render(f5);
    TopP2.render(f5);
    SupportFL.render(f5);
    SupportFR.render(f5);
    SupportBL.render(f5);
    SupportBR.render(f5);
    ArchRBase.render(f5);
    ArchRTop.render(f5);
    ArchLBase.render(f5);
    ArchLTop.render(f5);
    ArchFBase.render(f5);
    ArchBBase.render(f5);
    ArchBTop.render(f5);
    ArchFTop.render(f5);
  }
  
  
  public void render(float f5){
	  BaseP1.render(f5);
	    BaseP2.render(f5);
	    Core.render(f5);
	    TopP1.render(f5);
	    TopP2.render(f5);
	    SupportFL.render(f5);
	    SupportFR.render(f5);
	    SupportBL.render(f5);
	    SupportBR.render(f5);
	    ArchRBase.render(f5);
	    ArchRTop.render(f5);
	    ArchLBase.render(f5);
	    ArchLTop.render(f5);
	    ArchFBase.render(f5);
	    ArchBBase.render(f5);
	    ArchBTop.render(f5);
	    ArchFTop.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }

}
